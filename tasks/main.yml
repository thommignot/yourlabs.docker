---

- name: /etc/systemd/system/docker.service.d
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory
#
# - name: /etc/systemd/system/docker.service.d/override.conf
#   copy:
#     dest: /etc/systemd/system/docker.service.d/override.conf
#     content: |
#       [Service]
#       ExecStart=
#       ExecStart=/usr/bin/dockerd -H fd:// --iptables=false --ip-masq=false

- name: add docker repository (centos)
  shell: dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo && dnf install --nobest -y docker-ce
  when: ansible_distribution == 'CentOS'

- name: add docker repository (apt)
  when: ansible_distribution != 'CentOS'
  include_role:
    name: yourlabs.aptrepo
  vars:
    key_id: '9DC858229FC7DD38854AE2D88D81803C0EBFCD88'
    key_url: https://download.docker.com/linux/ubuntu/gpg
    repo: deb [arch=amd64] https://download.docker.com/linux/{{ ansible_distribution|lower }} {{ ansible_distribution_release|lower }} edge

- name: Install docker-ce (non-centos)
  when: ansible_distribution != 'CentOS'
  package:
    name: '{{ docker_package|default("docker-ce" if ansible_os_family == "Debian" else "docker") }}'
    state: present

- name: Ensure python-docker is uninstalled, we'll need the pip module
  package:
    name: python-docker
    state: absent

- include_role: name=yourlabs.pip
  vars:
    name: docker

- name: Include OS specific vars file
  include_vars: 'vars/{{ hostvars[inventory_hostname]["ansible_os_family"] }}.yml'

- name: Install paramiko package for docker-compose
  package:
    name: '{{ pkgs }}'
    state: latest

- name: Pip install docker-compose
  pip:
    name: docker-compose
    state: present
    executable: pip3

- name: Start docker on boot
  service:
    name: docker
    enabled: yes
    state: started

- name: Add active_users to docker group
  with_items: '{{ users|default([]) }}'
  when: '{{ "docker" in item.get("roles", {}).get("ssh", []) }}'
  user:
    name: '{{ item["name"] }}'
    state: present
    groups: docker
    append: yes

- name: Increase vm.max_map_count to 1048576
  failed_when: false
  sysctl:
    name: vm.max_map_count
    value: "1048576"
    state: present

- name: Create a couple of system-wide networks, web and mail
  docker_network:
    name: '{{ item }}'
  with_items: [web, mail]

- name: Put docker being a secure firewall
  include_role: name=yourlabs.firewall
  vars:
    rules: |
      *filter
      :INPUT ACCEPT [0:0]
      :FORWARD DROP [0:0]
      :LOGDROP - [0:0]
      :OUTPUT ACCEPT [384:67874]
      :TCP - [0:0]
      :UDP - [0:0]
      :DOCKER-USER - [0:0]
      -A LOGDROP -p tcp -m limit --limit 5/min -j LOG --log-prefix "Denied TCP: " --log-level 7
      -A LOGDROP -p udp -m limit --limit 5/min -j LOG --log-prefix "Denied UDP: " --log-level 7
      -A LOGDROP -p icmp -m limit --limit 5/min -j LOG --log-prefix "Denied ICMP: " --log-level 7
      -A LOGDROP -j DROP
      -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
      -A INPUT -i lo -j ACCEPT
      -A INPUT -i docker0 -j ACCEPT
      {% if firewall_allow_ping %}
      -A INPUT -p icmp -m icmp --icmp-type 8 -m conntrack --ctstate NEW -j ACCEPT
      {% else %}
      -A INPUT -p icmp -m icmp --icmp-type 8 -m conntrack --ctstate NEW -j LOGDROP
      {% endif %}
      -A INPUT -p udp -m conntrack --ctstate NEW -j UDP
      -A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -m conntrack --ctstate NEW -j TCP
      -A DOCKER-USER -i eno1 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
      -A DOCKER-USER -i eno1 -p tcp -m tcp --dport 80 -j ACCEPT
      -A DOCKER-USER -i eno1 -p tcp -m tcp --dport 443 -j ACCEPT
      -A DOCKER-USER -i eno1 -p tcp -m tcp --dport 587 -j ACCEPT
      -A DOCKER-USER -i eno1 -j LOGDROP
      -A TCP -p tcp -m tcp --dport 22 -j ACCEPT
      -A TCP -p tcp -m tcp --dport 2222 -j ACCEPT
      # allow netdata proxy
      -A TCP -i docker0 -p tcp -m tcp --dport 19999 --dst 172.17.0.1 --src 172.17.0.1/16 -j ACCEPT
      -A TCP -i docker0 -p tcp -m tcp --dport 4949 -j ACCEPT
      -A UDP -i docker0 -p udp -m udp --dport 53 -j ACCEPT
      -A INPUT -j LOGDROP
      COMMIT

- name: /etc/systemd/system/iptables.service.d/override.conf
  notify: Apply firewall
  copy:
    dest: /etc/systemd/system/{{ firewall_service }}.service.d/override.conf
    content: |
      [Unit]
      Before=docker.service

- meta: flush_handlers

- name: Restart docker
  service: name=docker state=restarted

- include_role:
    name: yourlabs.remember
  vars:
    remember_fact: yourlabs.docker
    remember_extra:
      state: success
